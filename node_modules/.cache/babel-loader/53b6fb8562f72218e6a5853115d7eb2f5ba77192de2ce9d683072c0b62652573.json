{"ast":null,"code":"var _jsxFileName = \"/Users/wanggaoyuan/Library/CloudStorage/OneDrive-Personal/Desktop/CS5346/d3-visualization/src/LinePlot.jsx\",\n  _s = $RefreshSig$();\nimport * as d3 from \"d3\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nasync function loadData() {\n  var fileFath = \"data/Avocado_HassAvocadoBoard_20152023v1.0.1.csv\";\n  const data = await d3.csv(fileFath);\n  return data;\n}\n\n// [{\n//   Date : data[0].Date,\n//   AveragePrice : data[0].AveragePrice,\n//   TotalVolume : data[0].TotalVolume,\n//   plu4046 : data[0].plu4046,\n//   plu4225 : data[0].plu4225,\n//   plu4770 : data[0].plu4770,\n//   TotalBags : data[0].TotalBags,\n//   SmallBags : data[0].SmallBags,\n//   LargeBags : data[0].LargeBags,\n//   XLargeBags : data[0].XLargeBags,\n//   type : data[0].type,\n//   region : data[0].region,\n// }]\n\nfunction drawChart(data) {\n  const width = 600;\n  const height = 400;\n  const svg = d3.select(\"body\").append(\"svg\").attr(\"width\", width).attr(\"height\", height);\n\n  // 创建一个g 当后面元素的group容器，移到（30，30）的位置\n  // 定义上下左右边距给坐标轴文字距离\n  const m = {\n    top: 30,\n    right: 30,\n    bottom: 30,\n    left: 30\n  };\n  const g = svg.append(\"g\").attr(\"transform\", \"translate(30, 30)\");\n\n  // 实际我们图的高度宽度\n  const gW = width - m.left;\n  const gH = height - m.top - m.bottom;\n\n  // 定义x坐标轴的比例尺，gW为x轴的宽度，关于scaleBand参考上一篇文章以及相关文章\n  // 这里我们会得到一个xScale.bandwidth()的距离，bandwidth()访问每个波段的宽度：\n  const xScale = d3.scaleBand().range([0, gW]);\n\n  // 定义好x轴定义域，画出x轴axisBottom，底部位置，year是值\n  xScale.domain(data.map(item => item.year));\n  g.append(\"g\").attr(\"transform\", `translate(0, ${gH})`).call(d3.axisBottom(xScale)).attr(\"stroke\", \"red\");\n  // 定义y坐标轴的比例尺，gH为y轴的宽度\n  const yScale = d3.scaleLinear().range([gH, 0]);\n\n  // 定义好y轴d定义域，画出y轴，y轴画在左边axisLeft，value是值\n\n  yScale.domain([0, d3.max(data, item => item.value)]);\n  g.append(\"g\").call(d3.axisLeft(yScale)).attr(\"stroke\", \"red\");\n  // 先给点画上小圆圈和文字，创建一个文字和圆圈的group\n  // join那句可以改为以前v4写法.enter().append('circle')\n\n  const group1 = g.selectAll(\".gruop-circle-text\").data(data).join(\"g\").attr(\"class\", \"gruop-circle-text\");\n\n  // 画出圆点即是圆圈，xScale.bandwidth()就用到了,bandwidth()访问每个波段的宽度,\n  // xScale.bandwidth() / 2 我们把元素位置居中\n\n  group1.selectAll(\"circle\").data(data).join(\"circle\").attr(\"cx\", d => {\n    return xScale(d.year) + xScale.bandwidth() / 2;\n  }).attr(\"cy\", d => {\n    return yScale(d.value);\n  }).attr(\"r\", 3).attr(\"fill\", \"red\");\n\n  // 绘制出文字\n\n  group1.selectAll(\"text\").data(data).join(\"text\").attr(\"x\", d => {\n    return xScale(d.year) + xScale.bandwidth() / 2;\n  }).attr(\"y\", d => yScale(d.value) - 2).text(d => d.value);\n  // 创建一个line的生成器 用d3.line,把所有点连起来\n  const line = d3.line().x(d => {\n    // 这里是d3.scaleBand自带比例尺\n    return xScale(d.year) + xScale.bandwidth() / 2;\n  }).y(d => {\n    return yScale(d.value);\n  }).curve(d3.curveCatmullRom); //这里有多种形态可以选择\n  g.append(\"path\").attr(\"d\", line(data)).attr(\"fill\", \"none\").attr(\"stroke\", \"purple\");\n}\nexport default function Chart1() {\n  _s();\n  const [dataset, setState] = useState([]);\n  var datas;\n  loadData().then(data => {\n    datas = data;\n    setState(JSON.stringify(data[0]));\n    console.log(data);\n    return data[0];\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [dataset, /*#__PURE__*/_jsxDEV(\"svg\", {\n      width: \"800\",\n      height: \"400\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 129,\n    columnNumber: 5\n  }, this);\n}\n_s(Chart1, \"Iaq1MosrxDNjMYFZkmvXs0N4uvs=\");\n_c = Chart1;\nvar _c;\n$RefreshReg$(_c, \"Chart1\");","map":{"version":3,"names":["d3","useState","jsxDEV","_jsxDEV","loadData","fileFath","data","csv","drawChart","width","height","svg","select","append","attr","m","top","right","bottom","left","g","gW","gH","xScale","scaleBand","range","domain","map","item","year","call","axisBottom","yScale","scaleLinear","max","value","axisLeft","group1","selectAll","join","d","bandwidth","text","line","x","y","curve","curveCatmullRom","Chart1","_s","dataset","setState","datas","then","JSON","stringify","console","log","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/wanggaoyuan/Library/CloudStorage/OneDrive-Personal/Desktop/CS5346/d3-visualization/src/LinePlot.jsx"],"sourcesContent":["import * as d3 from \"d3\";\nimport { useState } from \"react\";\n\nasync function loadData() {\n  var fileFath = \"data/Avocado_HassAvocadoBoard_20152023v1.0.1.csv\"\n  const data = await d3.csv(fileFath);\n  return data\n}\n\n// [{\n//   Date : data[0].Date,\n//   AveragePrice : data[0].AveragePrice,\n//   TotalVolume : data[0].TotalVolume,\n//   plu4046 : data[0].plu4046,\n//   plu4225 : data[0].plu4225,\n//   plu4770 : data[0].plu4770,\n//   TotalBags : data[0].TotalBags,\n//   SmallBags : data[0].SmallBags,\n//   LargeBags : data[0].LargeBags,\n//   XLargeBags : data[0].XLargeBags,\n//   type : data[0].type,\n//   region : data[0].region,\n// }]\n\nfunction drawChart(data) {\n  const width = 600;\n  const height = 400;\n\n  const svg = d3\n    .select(\"body\")\n    .append(\"svg\")\n    .attr(\"width\", width)\n    .attr(\"height\", height);\n    \n  // 创建一个g 当后面元素的group容器，移到（30，30）的位置\n  // 定义上下左右边距给坐标轴文字距离\n  const m = { top: 30, right: 30, bottom: 30, left: 30 };\n  const g = svg.append(\"g\").attr(\"transform\", \"translate(30, 30)\");\n  \n  // 实际我们图的高度宽度\n  const gW = width - m.left;\n  const gH = height - m.top - m.bottom;\n\n// 定义x坐标轴的比例尺，gW为x轴的宽度，关于scaleBand参考上一篇文章以及相关文章\n// 这里我们会得到一个xScale.bandwidth()的距离，bandwidth()访问每个波段的宽度：\n const xScale = d3.scaleBand().range([0, gW]);\n     \n // 定义好x轴定义域，画出x轴axisBottom，底部位置，year是值\n  xScale.domain(data.map(item => item.year));\n \n  g.append(\"g\")\n    .attr(\"transform\", `translate(0, ${gH})`)\n    .call(d3.axisBottom(xScale))\n    .attr(\"stroke\", \"red\");\n    // 定义y坐标轴的比例尺，gH为y轴的宽度\n const yScale = d3.scaleLinear().range([gH, 0]);\n \n // 定义好y轴d定义域，画出y轴，y轴画在左边axisLeft，value是值\n \n yScale.domain([0, d3.max(data, item => item.value)]);\n \n g.append(\"g\")\n   .call(d3.axisLeft(yScale))\n   .attr(\"stroke\", \"red\");\n   // 先给点画上小圆圈和文字，创建一个文字和圆圈的group\n// join那句可以改为以前v4写法.enter().append('circle')\n\nconst group1 = g\n.selectAll(\".gruop-circle-text\")\n.data(data)\n.join(\"g\")\n.attr(\"class\", \"gruop-circle-text\");\n\n// 画出圆点即是圆圈，xScale.bandwidth()就用到了,bandwidth()访问每个波段的宽度,\n// xScale.bandwidth() / 2 我们把元素位置居中\n\n group1\n   .selectAll(\"circle\")\n   .data(data)\n   .join(\"circle\")\n   .attr(\"cx\", d => {\n     return xScale(d.year) + xScale.bandwidth() / 2;\n   })\n   .attr(\"cy\", d => {\n     return yScale(d.value);\n   })\n   .attr(\"r\", 3)\n   .attr(\"fill\", \"red\");\n   \n   \n  // 绘制出文字\n\t\n group1\n   .selectAll(\"text\")\n   .data(data)\n   .join(\"text\")\n   .attr(\"x\", d => {\n     return xScale(d.year) + xScale.bandwidth() / 2;\n   })\n   .attr(\"y\", d => yScale(d.value) - 2)\n   .text(d => d.value);\n   // 创建一个line的生成器 用d3.line,把所有点连起来\n\tconst line = d3\n  .line()\n  .x(d => {\n    // 这里是d3.scaleBand自带比例尺\n    return xScale(d.year) + xScale.bandwidth() / 2;\n  })\n  .y(d => {\n    return yScale(d.value);\n  })\n  .curve(d3.curveCatmullRom);  //这里有多种形态可以选择\n  g.append(\"path\")\n  .attr(\"d\", line(data))\n  .attr(\"fill\", \"none\")\n  .attr(\"stroke\", \"purple\");\n}\n\nexport default function Chart1() {\n  const [dataset, setState] = useState([]);\n  var datas\n  loadData().then((data) => {\n    datas = data\n    setState(JSON.stringify(data[0]));\n    console.log(data)\n    return data[0];\n  });\n  return (\n    <div>\n      {dataset}\n      <svg width=\"800\" height=\"400\">\n      </svg>\n    </div>\n  )\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}