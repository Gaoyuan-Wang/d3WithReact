{"ast":null,"code":"import*as d3 from\"d3\";//import { useState } from \"react\";\nimport{jsx as _jsx}from\"react/jsx-runtime\";async function loadData(){var fileFath=\"data/Avocado_HassAvocadoBoard_20152023v1.0.1.csv\";const data=await d3.csv(fileFath);//console.log(data);\nreturn data;}// [{\n//   Date : data[0].Date,\n//   AveragePrice : data[0].AveragePrice,\n//   TotalVolume : data[0].TotalVolume,\n//   plu4046 : data[0].plu4046,\n//   plu4225 : data[0].plu4225,\n//   plu4770 : data[0].plu4770,\n//   TotalBags : data[0].TotalBags,\n//   SmallBags : data[0].SmallBags,\n//   LargeBags : data[0].LargeBags,\n//   XLargeBags : data[0].XLargeBags,\n//   type : data[0].type,\n//   region : data[0].region,\n// }]\nfunction drawChart(data){// const width = 800;\n// const height = 600;\n// const marginTop = 20;\n// const marginRight = 20;\n// const marginBottom = 30;\n// const marginLeft = 40;\n// const svg = d3.select(\"body\").append(\"svg\")\n// .attr(\"width\", width)\n// .attr(\"height\", height);\n// const x = d3.scaleUtc()\n//   .domain(d3.extent(data, d => new Date(d.Date)))\n//   .range([marginLeft, width - marginRight]);\n// const y = d3.scaleLinear()\n//   .domain([0, d3.max(data, d => d.AveragePrice)])\n//   .range([height - marginBottom, marginTop]);\n//   // Add the x-axis.\n// svg.append(\"g\")\n// .attr(\"transform\", `translate(0,${height - marginBottom})`)\n// .call(d3.axisBottom(x));\n// // Add the y-axis.\n// svg.append(\"g\")\n//   .attr(\"transform\", `translate(${marginLeft},0)`)\n//   .call(d3.axisLeft(y));\n// // Add the line.\n// // Declare the line generator.\n// const line = d3.line()\n//     .x(d => x(new Date(d.Date)))\n//     .y(d => y(d.AveragePrice));\n// svg.append(\"path\")\n// .attr(\"fill\", \"none\")\n// .attr(\"stroke\", \"steelblue\")\n// .attr(\"stroke-width\", 1.5)\n// .attr(\"d\", line(data));\n// set the dimensions and margins of the graph\nconst margin={top:10,right:30,bottom:30,left:60},width=860-margin.left-margin.right,height=600-margin.top-margin.bottom;// append the svg object to the body of the page\nconst svg=d3.select(\"body\").append(\"svg\").attr(\"width\",width+margin.left+margin.right).attr(\"height\",height+margin.top+margin.bottom).append(\"g\").attr(\"transform\",\"translate(\".concat(margin.left,\",\").concat(margin.top,\")\"));// group the data: I want to draw one line per group\nconst sumstat=d3.group(data,d=>d.region);// nest function allows to group the calculation per level of a factor\n// Add X axis --> it is a date format\nconst x=d3.scaleUtc().domain(d3.extent(data,d=>new Date(d.Date))).range([0,width]);svg.append(\"g\").attr(\"transform\",\"translate(0, \".concat(height,\")\")).call(d3.axisBottom(x).ticks(5));// Add Y axis\nconst y=d3.scaleLinear().domain([0,d3.max(data,d=>+d.AveragePrice)]).range([height,0]);svg.append(\"g\").call(d3.axisLeft(y));// color palette\nconst color=d3.scaleOrdinal().range(['#e41a1c','#377eb8']);// Draw the line\nsvg.selectAll(\".line\").data(sumstat).join(\"path\").attr(\"fill\",\"none\").attr(\"stroke\",function(d){return color(d[0]);}).attr(\"stroke-width\",1.5).attr(\"d\",function(d){return d3.line().x(function(d){return x(new Date(d.Date));}).y(function(d){return y(+d.AveragePrice);})(d[1]);});}export default function Chart1(){loadData().then(data=>{var b1=data.filter(d=>(d.region===\"Chicago\"||d.region===\"Atlanta\")&&d.type===\"conventional\");var b2=data.filter(d=>(d.region===\"Chicago\"||d.region===\"Atlanta\")&&d.type===\"organic\");drawChart(b1);drawChart(b2);return data[0];});return/*#__PURE__*/_jsx(\"div\",{});}","map":{"version":3,"names":["d3","jsx","_jsx","loadData","fileFath","data","csv","drawChart","margin","top","right","bottom","left","width","height","svg","select","append","attr","concat","sumstat","group","d","region","x","scaleUtc","domain","extent","Date","range","call","axisBottom","ticks","y","scaleLinear","max","AveragePrice","axisLeft","color","scaleOrdinal","selectAll","join","line","Chart1","then","b1","filter","type","b2"],"sources":["/Users/wanggaoyuan/Library/CloudStorage/OneDrive-Personal/Desktop/CS5346/d3WithReact/src/LinePlot.jsx"],"sourcesContent":["import * as d3 from \"d3\";\n//import { useState } from \"react\";\n\nasync function loadData() {\n  var fileFath = \"data/Avocado_HassAvocadoBoard_20152023v1.0.1.csv\"\n  const data = await d3.csv(fileFath);\n  //console.log(data);\n  return data\n}\n\n// [{\n//   Date : data[0].Date,\n//   AveragePrice : data[0].AveragePrice,\n//   TotalVolume : data[0].TotalVolume,\n//   plu4046 : data[0].plu4046,\n//   plu4225 : data[0].plu4225,\n//   plu4770 : data[0].plu4770,\n//   TotalBags : data[0].TotalBags,\n//   SmallBags : data[0].SmallBags,\n//   LargeBags : data[0].LargeBags,\n//   XLargeBags : data[0].XLargeBags,\n//   type : data[0].type,\n//   region : data[0].region,\n// }]\n\nfunction drawChart(data) {\n  // const width = 800;\n  // const height = 600;\n  // const marginTop = 20;\n  // const marginRight = 20;\n  // const marginBottom = 30;\n  // const marginLeft = 40;\n\n  // const svg = d3.select(\"body\").append(\"svg\")\n  // .attr(\"width\", width)\n  // .attr(\"height\", height);\n\n  // const x = d3.scaleUtc()\n  //   .domain(d3.extent(data, d => new Date(d.Date)))\n  //   .range([marginLeft, width - marginRight]);\n\n  // const y = d3.scaleLinear()\n  //   .domain([0, d3.max(data, d => d.AveragePrice)])\n  //   .range([height - marginBottom, marginTop]);\n\n  //   // Add the x-axis.\n  // svg.append(\"g\")\n  // .attr(\"transform\", `translate(0,${height - marginBottom})`)\n  // .call(d3.axisBottom(x));\n\n  // // Add the y-axis.\n  // svg.append(\"g\")\n  //   .attr(\"transform\", `translate(${marginLeft},0)`)\n  //   .call(d3.axisLeft(y));\n\n  // // Add the line.\n\n  // // Declare the line generator.\n  // const line = d3.line()\n  //     .x(d => x(new Date(d.Date)))\n  //     .y(d => y(d.AveragePrice));\n\n  // svg.append(\"path\")\n  // .attr(\"fill\", \"none\")\n  // .attr(\"stroke\", \"steelblue\")\n  // .attr(\"stroke-width\", 1.5)\n  // .attr(\"d\", line(data));\n\n// set the dimensions and margins of the graph\n  const margin = {top: 10, right: 30, bottom: 30, left: 60},\n  width = 860 - margin.left - margin.right,\n  height = 600 - margin.top - margin.bottom;\n\n  // append the svg object to the body of the page\n  const svg = d3.select(\"body\")\n  .append(\"svg\")\n  .attr(\"width\", width + margin.left + margin.right)\n  .attr(\"height\", height + margin.top + margin.bottom)\n  .append(\"g\")\n  .attr(\"transform\", `translate(${margin.left},${margin.top})`);\n\n  // group the data: I want to draw one line per group\n  const sumstat = d3.group(data, d => d.region); // nest function allows to group the calculation per level of a factor\n\n  // Add X axis --> it is a date format\n  const x = d3.scaleUtc()\n  .domain(d3.extent(data, d => new Date(d.Date)))\n  .range([ 0, width ]);\n  svg.append(\"g\")\n  .attr(\"transform\", `translate(0, ${height})`)\n  .call(d3.axisBottom(x).ticks(5));\n\n  // Add Y axis\n  const y = d3.scaleLinear()\n  .domain([0, d3.max(data, d => +d.AveragePrice)])\n  .range([ height, 0 ]);\n  svg.append(\"g\")\n  .call(d3.axisLeft(y));\n\n  // color palette\n  const color = d3.scaleOrdinal()\n  .range(['#e41a1c','#377eb8'])\n\n  // Draw the line\n  svg.selectAll(\".line\")\n    .data(sumstat)\n    .join(\"path\")\n      .attr(\"fill\", \"none\")\n      .attr(\"stroke\", function(d){ return color(d[0]) })\n      .attr(\"stroke-width\", 1.5)\n      .attr(\"d\", function(d){\n        return d3.line()\n          .x(function(d) { return x(new Date(d.Date)); })\n          .y(function(d) { return y(+d.AveragePrice); })\n          (d[1])\n      })\n\n}\n\nexport default function Chart1() {\n  loadData().then((data) => {\n    var b1 = data.filter(d => (d.region === \"Chicago\" || d.region === \"Atlanta\") && d.type === \"conventional\");\n    var b2 = data.filter(d => (d.region === \"Chicago\" || d.region === \"Atlanta\") && d.type === \"organic\");\n    drawChart(b1);\n    drawChart(b2);\n    return data[0];\n  });\n  \n  return (\n    <div>\n    </div>\n  )\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}