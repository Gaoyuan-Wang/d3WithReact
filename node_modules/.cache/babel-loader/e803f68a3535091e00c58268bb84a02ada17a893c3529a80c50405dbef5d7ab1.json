{"ast":null,"code":"var _jsxFileName = \"/Users/wanggaoyuan/Library/CloudStorage/OneDrive-Personal/Desktop/CS5346/d3WithReact/src/LinePlot.jsx\";\nimport * as d3 from \"d3\";\n//import { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nasync function loadData() {\n  var fileFath = \"data/Avocado_HassAvocadoBoard_20152023v1.0.1.csv\";\n  const data = await d3.csv(fileFath);\n  //console.log(data);\n  return data;\n}\n\n// [{\n//   Date : data[0].Date,\n//   AveragePrice : data[0].AveragePrice,\n//   TotalVolume : data[0].TotalVolume,\n//   plu4046 : data[0].plu4046,\n//   plu4225 : data[0].plu4225,\n//   plu4770 : data[0].plu4770,\n//   TotalBags : data[0].TotalBags,\n//   SmallBags : data[0].SmallBags,\n//   LargeBags : data[0].LargeBags,\n//   XLargeBags : data[0].XLargeBags,\n//   type : data[0].type,\n//   region : data[0].region,\n// }]\n\nfunction drawChart(data) {\n  // const width = 800;\n  // const height = 600;\n  // const marginTop = 20;\n  // const marginRight = 20;\n  // const marginBottom = 30;\n  // const marginLeft = 40;\n\n  // const svg = d3.select(\"body\").append(\"svg\")\n  // .attr(\"width\", width)\n  // .attr(\"height\", height);\n\n  // const x = d3.scaleUtc()\n  //   .domain(d3.extent(data, d => new Date(d.Date)))\n  //   .range([marginLeft, width - marginRight]);\n\n  // const y = d3.scaleLinear()\n  //   .domain([0, d3.max(data, d => d.AveragePrice)])\n  //   .range([height - marginBottom, marginTop]);\n\n  //   // Add the x-axis.\n  // svg.append(\"g\")\n  // .attr(\"transform\", `translate(0,${height - marginBottom})`)\n  // .call(d3.axisBottom(x));\n\n  // // Add the y-axis.\n  // svg.append(\"g\")\n  //   .attr(\"transform\", `translate(${marginLeft},0)`)\n  //   .call(d3.axisLeft(y));\n\n  // // Add the line.\n\n  // // Declare the line generator.\n  // const line = d3.line()\n  //     .x(d => x(new Date(d.Date)))\n  //     .y(d => y(d.AveragePrice));\n\n  // svg.append(\"path\")\n  // .attr(\"fill\", \"none\")\n  // .attr(\"stroke\", \"steelblue\")\n  // .attr(\"stroke-width\", 1.5)\n  // .attr(\"d\", line(data));\n\n  // set the dimensions and margins of the graph\n  const margin = {\n      top: 10,\n      right: 30,\n      bottom: 30,\n      left: 60\n    },\n    width = 860 - margin.left - margin.right,\n    height = 600 - margin.top - margin.bottom;\n\n  // append the svg object to the body of the page\n  const svg = d3.select(\"body\").append(\"svg\").attr(\"width\", width + margin.left + margin.right).attr(\"height\", height + margin.top + margin.bottom).append(\"g\").attr(\"transform\", `translate(${margin.left},${margin.top})`);\n\n  // group the data: I want to draw one line per group\n  const sumstat = d3.group(data, d => d.region); // nest function allows to group the calculation per level of a factor\n\n  // Add X axis --> it is a date format\n  const x = d3.scaleUtc().domain(d3.extent(data, d => new Date(d.Date))).range([0, width]);\n  svg.append(\"g\").attr(\"transform\", `translate(0, ${height})`).call(d3.axisBottom(x).ticks(5));\n\n  // Add Y axis\n  const y = d3.scaleLinear().domain([0, d3.max(data, d => +d.AveragePrice)]).range([height, 0]);\n  svg.append(\"g\").call(d3.axisLeft(y));\n\n  // color palette\n  const color = d3.scaleOrdinal().range(['#e41a1c', '#377eb8', '#4daf4a', '#984ea3']);\n\n  // Draw the line\n  svg.selectAll(\".line\").data(sumstat).join(\"path\").attr(\"fill\", \"none\").attr(\"stroke\", function (d) {\n    return color(d[0]);\n  }).attr(\"stroke-width\", 1.5).attr(\"d\", function (d) {\n    return d3.line().x(function (d) {\n      return x(new Date(d.Date));\n    }).y(function (d) {\n      return y(+d.AveragePrice);\n    })(d[1]);\n  });\n}\nexport default function Chart1() {\n  loadData().then(data => {\n    var b1 = data.filter(d => (d.region === \"Chicago\" || d.region === \"Atlanta\") && d.type === \"conventional\");\n    var b2 = data.filter(d => (d.region === \"Chicago\" || d.region === \"Atlanta\") && d.type === \"organic\");\n    // drawChart(filteredDataForAlbanyConventional);\n    // drawChart(filteredDataForAlbanyOrganic);\n    // drawChart(b1);\n    drawChart(b1);\n    drawChart(b2);\n    return data[0];\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 133,\n    columnNumber: 5\n  }, this);\n}\n_c = Chart1;\nvar _c;\n$RefreshReg$(_c, \"Chart1\");","map":{"version":3,"names":["d3","jsxDEV","_jsxDEV","loadData","fileFath","data","csv","drawChart","margin","top","right","bottom","left","width","height","svg","select","append","attr","sumstat","group","d","region","x","scaleUtc","domain","extent","Date","range","call","axisBottom","ticks","y","scaleLinear","max","AveragePrice","axisLeft","color","scaleOrdinal","selectAll","join","line","Chart1","then","b1","filter","type","b2","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/wanggaoyuan/Library/CloudStorage/OneDrive-Personal/Desktop/CS5346/d3WithReact/src/LinePlot.jsx"],"sourcesContent":["import * as d3 from \"d3\";\n//import { useState } from \"react\";\n\nasync function loadData() {\n  var fileFath = \"data/Avocado_HassAvocadoBoard_20152023v1.0.1.csv\"\n  const data = await d3.csv(fileFath);\n  //console.log(data);\n  return data\n}\n\n// [{\n//   Date : data[0].Date,\n//   AveragePrice : data[0].AveragePrice,\n//   TotalVolume : data[0].TotalVolume,\n//   plu4046 : data[0].plu4046,\n//   plu4225 : data[0].plu4225,\n//   plu4770 : data[0].plu4770,\n//   TotalBags : data[0].TotalBags,\n//   SmallBags : data[0].SmallBags,\n//   LargeBags : data[0].LargeBags,\n//   XLargeBags : data[0].XLargeBags,\n//   type : data[0].type,\n//   region : data[0].region,\n// }]\n\nfunction drawChart(data) {\n  // const width = 800;\n  // const height = 600;\n  // const marginTop = 20;\n  // const marginRight = 20;\n  // const marginBottom = 30;\n  // const marginLeft = 40;\n\n  // const svg = d3.select(\"body\").append(\"svg\")\n  // .attr(\"width\", width)\n  // .attr(\"height\", height);\n\n  // const x = d3.scaleUtc()\n  //   .domain(d3.extent(data, d => new Date(d.Date)))\n  //   .range([marginLeft, width - marginRight]);\n\n  // const y = d3.scaleLinear()\n  //   .domain([0, d3.max(data, d => d.AveragePrice)])\n  //   .range([height - marginBottom, marginTop]);\n\n  //   // Add the x-axis.\n  // svg.append(\"g\")\n  // .attr(\"transform\", `translate(0,${height - marginBottom})`)\n  // .call(d3.axisBottom(x));\n\n  // // Add the y-axis.\n  // svg.append(\"g\")\n  //   .attr(\"transform\", `translate(${marginLeft},0)`)\n  //   .call(d3.axisLeft(y));\n\n  // // Add the line.\n\n  // // Declare the line generator.\n  // const line = d3.line()\n  //     .x(d => x(new Date(d.Date)))\n  //     .y(d => y(d.AveragePrice));\n\n  // svg.append(\"path\")\n  // .attr(\"fill\", \"none\")\n  // .attr(\"stroke\", \"steelblue\")\n  // .attr(\"stroke-width\", 1.5)\n  // .attr(\"d\", line(data));\n\n// set the dimensions and margins of the graph\n  const margin = {top: 10, right: 30, bottom: 30, left: 60},\n  width = 860 - margin.left - margin.right,\n  height = 600 - margin.top - margin.bottom;\n\n  // append the svg object to the body of the page\n  const svg = d3.select(\"body\")\n  .append(\"svg\")\n  .attr(\"width\", width + margin.left + margin.right)\n  .attr(\"height\", height + margin.top + margin.bottom)\n  .append(\"g\")\n  .attr(\"transform\", `translate(${margin.left},${margin.top})`);\n\n  // group the data: I want to draw one line per group\n  const sumstat = d3.group(data, d => d.region); // nest function allows to group the calculation per level of a factor\n\n  // Add X axis --> it is a date format\n  const x = d3.scaleUtc()\n  .domain(d3.extent(data, d => new Date(d.Date)))\n  .range([ 0, width ]);\n  svg.append(\"g\")\n  .attr(\"transform\", `translate(0, ${height})`)\n  .call(d3.axisBottom(x).ticks(5));\n\n  // Add Y axis\n  const y = d3.scaleLinear()\n  .domain([0, d3.max(data, d => +d.AveragePrice)])\n  .range([ height, 0 ]);\n  svg.append(\"g\")\n  .call(d3.axisLeft(y));\n\n  // color palette\n  const color = d3.scaleOrdinal()\n  .range(['#e41a1c','#377eb8','#4daf4a','#984ea3'])\n\n  // Draw the line\n  svg.selectAll(\".line\")\n    .data(sumstat)\n    .join(\"path\")\n      .attr(\"fill\", \"none\")\n      .attr(\"stroke\", function(d){ return color(d[0]) })\n      .attr(\"stroke-width\", 1.5)\n      .attr(\"d\", function(d){\n        return d3.line()\n          .x(function(d) { return x(new Date(d.Date)); })\n          .y(function(d) { return y(+d.AveragePrice); })\n          (d[1])\n      })\n\n}\n\nexport default function Chart1() {\n  loadData().then((data) => {\n    var b1 = data.filter(d => (d.region === \"Chicago\" || d.region === \"Atlanta\") && d.type === \"conventional\");\n    var b2 = data.filter(d => (d.region === \"Chicago\" || d.region === \"Atlanta\") && d.type === \"organic\");\n    // drawChart(filteredDataForAlbanyConventional);\n    // drawChart(filteredDataForAlbanyOrganic);\n    // drawChart(b1);\n    drawChart(b1);\n    drawChart(b2);\n    return data[0];\n  });\n  \n  return (\n    <div>\n    </div>\n  )\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}