{"ast":null,"code":"var _jsxFileName = \"/Users/wanggaoyuan/Library/CloudStorage/OneDrive-Personal/Desktop/CS5346/d3WithReact/src/PiePlot.jsx\";\nimport * as d3 from \"d3\";\n//import { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nasync function loadData() {\n  var fileFath = \"data/Avocado_HassAvocadoBoard_20152023v1.0.1.csv\";\n  const data = await d3.csv(fileFath);\n  return data;\n}\n\n// [{\n//   Date : data[0].Date,\n//   AveragePrice : data[0].AveragePrice,\n//   TotalVolume : data[0].TotalVolume,\n//   plu4046 : data[0].plu4046,\n//   plu4225 : data[0].plu4225,\n//   plu4770 : data[0].plu4770,\n//   TotalBags : data[0].TotalBags,\n//   SmallBags : data[0].SmallBags,\n//   LargeBags : data[0].LargeBags,\n//   XLargeBags : data[0].XLargeBags,\n//   type : data[0].type,\n//   region : data[0].region,\n// }]\n\nfunction drawPieChart(data) {\n  var sum = 0;\n  for (const [key, value] of Object.entries(data)) {\n    sum += value;\n  }\n\n  // set the dimensions and margins of the graph\n  const width = 450,\n    height = 450,\n    margin = 40;\n\n  // The radius of the pieplot is half the width or half the height (smallest one). I subtract a bit of margin.\n  const radius = Math.min(width, height) / 2 - margin;\n\n  // append the svg object to the div called 'my_dataviz'\n  const svg = d3.select(\"body\").append(\"svg\").attr(\"width\", width).attr(\"height\", height).append(\"g\").attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n  // set the color scale\n  const color = d3.scaleOrdinal().range(d3.schemeSet2);\n\n  // Compute the position of each group on the pie:\n  const pie = d3.pie().value(function (d) {\n    return d[1];\n  });\n  const data_ready = pie(Object.entries(data));\n  console.log(data_ready);\n  var arcGenerator = d3.arc().innerRadius(0).outerRadius(radius);\n\n  // Build the pie chart: Basically, each part of the pie is a path that we build using the arc function.\n  svg.selectAll('whatever').data(data_ready).join('path').attr('d', arcGenerator).attr('fill', function (d) {\n    return color(d.data[1]);\n  }).attr(\"stroke\", \"black\").style(\"stroke-width\", \"2px\").style(\"opacity\", 0.7);\n  svg.selectAll('mySlices').data(data_ready).join('text').text(function (d) {\n    return d.data[0] + ':' + String(Math.round(d.data[1] / sum * 100000 / 1000.00).toFixed(2)) + '%';\n  }).attr(\"transform\", function (d) {\n    return `translate(${arcGenerator.centroid(d)})`;\n  }).style(\"text-anchor\", \"middle\").style(\"font-size\", 10);\n  const outerArc = d3.arc().innerRadius(radius * 0.9).outerRadius(radius * 0.9);\n\n  // Add the polylines between chart and labels:\n  svg.selectAll('allPolylines').data(data_ready).join('polyline').attr(\"stroke\", \"black\").style(\"fill\", \"none\").attr(\"stroke-width\", 1).attr('points', function (d) {\n    const posA = arcGenerator.centroid(d); // line insertion in the slice\n    const posB = outerArc.centroid(d); // line break: we use the other arc generator that has been built only for that\n    const posC = outerArc.centroid(d); // Label position = almost the same as posB\n    const midangle = d.startAngle + (d.endAngle - d.startAngle) / 2; // we need the angle to see if the X position will be at the extreme right or extreme left\n    posC[0] = radius * 0.95 * (midangle < Math.PI ? 1 : -1); // multiply by 1 or -1 to put it on the right or on the left\n    return [posA, posB, posC];\n  });\n\n  // Add the polylines between chart and labels:\n  svg.selectAll('allLabels').data(data_ready).join('text').text(d => d.data[0]).attr('transform', function (d) {\n    const pos = outerArc.centroid(d);\n    const midangle = d.startAngle + (d.endAngle - d.startAngle) / 2;\n    pos[0] = radius * 0.99 * (midangle < Math.PI ? 1 : -1);\n    return `translate(${pos})`;\n  }).style('text-anchor', function (d) {\n    const midangle = d.startAngle + (d.endAngle - d.startAngle) / 2;\n    return midangle < Math.PI ? 'start' : 'end';\n  });\n}\nexport default function Chart3() {\n  var acc = {};\n  acc['SmallBags'] = 0;\n  acc['LargeBags'] = 0;\n  acc['XLargeBags'] = 0;\n  loadData().then(data => {\n    var count = data.forEach(d => {\n      //console.log(Number(d.LargeBags));\n      if (!isNaN(parseFloat(d.SmallBags))) {\n        acc['SmallBags'] += parseFloat(d.SmallBags);\n      }\n      if (!isNaN(parseFloat(d.LargeBags))) {\n        acc['LargeBags'] += parseFloat(d.LargeBags);\n      }\n      if (!isNaN(parseFloat(d.XLargeBags))) {\n        acc['XLargeBags'] += parseFloat(d.XLargeBags);\n      }\n    });\n    console.log(acc);\n    // var sortedKeys = Object.keys(count).sort((a, b) => Number(a) - Number(b));\n    // var sortedObj = [];\n    // sortedKeys.forEach(key => {\n    //   sortedObj.push({AveragePrice: key, count: count[key]});\n    // });\n    // sortedObj = sortedObj.filter(d => d.count > 1);\n    drawPieChart(acc);\n    return data[0];\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 152,\n    columnNumber: 5\n  }, this);\n}\n_c = Chart3;\nvar _c;\n$RefreshReg$(_c, \"Chart3\");","map":{"version":3,"names":["d3","jsxDEV","_jsxDEV","loadData","fileFath","data","csv","drawPieChart","sum","key","value","Object","entries","width","height","margin","radius","Math","min","svg","select","append","attr","color","scaleOrdinal","range","schemeSet2","pie","d","data_ready","console","log","arcGenerator","arc","innerRadius","outerRadius","selectAll","join","style","text","String","round","toFixed","centroid","outerArc","posA","posB","posC","midangle","startAngle","endAngle","PI","pos","Chart3","acc","then","count","forEach","isNaN","parseFloat","SmallBags","LargeBags","XLargeBags","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/wanggaoyuan/Library/CloudStorage/OneDrive-Personal/Desktop/CS5346/d3WithReact/src/PiePlot.jsx"],"sourcesContent":["import * as d3 from \"d3\";\n//import { useState } from \"react\";\n\nasync function loadData() {\n  var fileFath = \"data/Avocado_HassAvocadoBoard_20152023v1.0.1.csv\"\n  const data = await d3.csv(fileFath);\n  return data\n}\n\n// [{\n//   Date : data[0].Date,\n//   AveragePrice : data[0].AveragePrice,\n//   TotalVolume : data[0].TotalVolume,\n//   plu4046 : data[0].plu4046,\n//   plu4225 : data[0].plu4225,\n//   plu4770 : data[0].plu4770,\n//   TotalBags : data[0].TotalBags,\n//   SmallBags : data[0].SmallBags,\n//   LargeBags : data[0].LargeBags,\n//   XLargeBags : data[0].XLargeBags,\n//   type : data[0].type,\n//   region : data[0].region,\n// }]\n\nfunction drawPieChart(data) {\n    var sum = 0;\n    for (const [key, value] of Object.entries(data)) {\n        sum += value;\n    }\n\n    // set the dimensions and margins of the graph\n    const width = 450,\n        height = 450,\n        margin = 40;\n\n    // The radius of the pieplot is half the width or half the height (smallest one). I subtract a bit of margin.\n    const radius = Math.min(width, height) / 2 - margin;\n\n    // append the svg object to the div called 'my_dataviz'\n    const svg = d3.select(\"body\")\n    .append(\"svg\")\n        .attr(\"width\", width)\n        .attr(\"height\", height)\n    .append(\"g\")\n        .attr(\"transform\", `translate(${width/2}, ${height/2})`);\n\n\n    // set the color scale\n    const color = d3.scaleOrdinal()\n    .range(d3.schemeSet2)\n\n    // Compute the position of each group on the pie:\n    const pie = d3.pie()\n    .value(function(d) {return d[1]})\n    const data_ready = pie(Object.entries(data))\n    console.log(data_ready);\n\n    var arcGenerator = d3.arc()\n        .innerRadius(0)\n        .outerRadius(radius)\n\n    // Build the pie chart: Basically, each part of the pie is a path that we build using the arc function.\n    svg\n    .selectAll('whatever')\n    .data(data_ready)\n    .join('path')\n    .attr('d', arcGenerator)\n    .attr('fill', function(d){ return(color(d.data[1])) })\n    .attr(\"stroke\", \"black\")\n    .style(\"stroke-width\", \"2px\")\n    .style(\"opacity\", 0.7)\n\n    svg\n    .selectAll('mySlices')\n    .data(data_ready)\n    .join('text')\n    .text(function(d){ return d.data[0] + ':' + String(Math.round((d.data[1] / sum * 100000)/1000.00).toFixed(2)) + '%'})\n    .attr(\"transform\", function(d) { return `translate(${arcGenerator.centroid(d)})`})\n    .style(\"text-anchor\", \"middle\")\n    .style(\"font-size\", 10)\n\n    const outerArc = d3.arc()\n  .innerRadius(radius * 0.9)\n  .outerRadius(radius * 0.9)\n\n// Add the polylines between chart and labels:\nsvg\n  .selectAll('allPolylines')\n  .data(data_ready)\n  .join('polyline')\n    .attr(\"stroke\", \"black\")\n    .style(\"fill\", \"none\")\n    .attr(\"stroke-width\", 1)\n    .attr('points', function(d) {\n      const posA = arcGenerator.centroid(d) // line insertion in the slice\n      const posB = outerArc.centroid(d) // line break: we use the other arc generator that has been built only for that\n      const posC = outerArc.centroid(d); // Label position = almost the same as posB\n      const midangle = d.startAngle + (d.endAngle - d.startAngle) / 2 // we need the angle to see if the X position will be at the extreme right or extreme left\n      posC[0] = radius * 0.95 * (midangle < Math.PI ? 1 : -1); // multiply by 1 or -1 to put it on the right or on the left\n      return [posA, posB, posC]\n    })\n\n// Add the polylines between chart and labels:\nsvg\n  .selectAll('allLabels')\n  .data(data_ready)\n  .join('text')\n    .text(d => d.data[0])\n    .attr('transform', function(d) {\n        const pos = outerArc.centroid(d);\n        const midangle = d.startAngle + (d.endAngle - d.startAngle) / 2\n        pos[0] = radius * 0.99 * (midangle < Math.PI ? 1 : -1);\n        return `translate(${pos})`;\n    })\n    .style('text-anchor', function(d) {\n        const midangle = d.startAngle + (d.endAngle - d.startAngle) / 2\n        return (midangle < Math.PI ? 'start' : 'end')\n    })\n}\n\n\nexport default function Chart3() {\n    var acc = {};\n    acc['SmallBags'] = 0;\n    acc['LargeBags'] = 0;\n    acc['XLargeBags'] = 0;\n    loadData().then((data) => {\n        var count = data.forEach((d) => {\n            //console.log(Number(d.LargeBags));\n            if(!isNaN(parseFloat(d.SmallBags))){\n                acc['SmallBags'] += parseFloat(d.SmallBags);\n            }\n            if(!isNaN(parseFloat(d.LargeBags))){\n                acc['LargeBags'] += parseFloat(d.LargeBags);\n            }\n            if(!isNaN(parseFloat(d.XLargeBags))){\n                acc['XLargeBags'] += parseFloat(d.XLargeBags);\n            }\n    })\n    console.log(acc);\n    // var sortedKeys = Object.keys(count).sort((a, b) => Number(a) - Number(b));\n    // var sortedObj = [];\n    // sortedKeys.forEach(key => {\n    //   sortedObj.push({AveragePrice: key, count: count[key]});\n    // });\n    // sortedObj = sortedObj.filter(d => d.count > 1);\n    drawPieChart(acc);\n    return data[0];\n  });\n  \n  return (\n    <div>\n    </div>\n  )\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}