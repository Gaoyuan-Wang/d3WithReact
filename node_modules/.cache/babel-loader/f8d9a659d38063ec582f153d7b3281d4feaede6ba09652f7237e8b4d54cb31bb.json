{"ast":null,"code":"var _jsxFileName = \"/Users/wanggaoyuan/Library/CloudStorage/OneDrive-Personal/Desktop/CS5346/d3WithReact/src/LinePlot.jsx\",\n  _s = $RefreshSig$();\nimport * as d3 from \"https://cdn.jsdelivr.net/npm/d3@7/+esm\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nasync function loadData() {\n  var fileFath = \"data/test.csv\";\n  const data = await d3.csv(fileFath);\n  console.log(data);\n  return data;\n}\n\n// [{\n//   Date : data[0].Date,\n//   AveragePrice : data[0].AveragePrice,\n//   TotalVolume : data[0].TotalVolume,\n//   plu4046 : data[0].plu4046,\n//   plu4225 : data[0].plu4225,\n//   plu4770 : data[0].plu4770,\n//   TotalBags : data[0].TotalBags,\n//   SmallBags : data[0].SmallBags,\n//   LargeBags : data[0].LargeBags,\n//   XLargeBags : data[0].XLargeBags,\n//   type : data[0].type,\n//   region : data[0].region,\n// }]\n\nfunction drawChart(data) {\n  // const width = 600;\n  // const height = 400;\n\n  // const svg = d3\n  //   .select(\"body\")\n  //   .append(\"svg\")\n  //   .attr(\"width\", width)\n  //   .attr(\"height\", height);\n\n  // // 创建一个g 当后面元素的group容器，移到（30，30）的位置\n  // // 定义上下左右边距给坐标轴文字距离\n  // const m = { top: 30, right: 30, bottom: 30, left: 30 };\n  // const g = svg.append(\"g\").attr(\"transform\", \"translate(30, 30)\");\n\n  // // 实际我们图的高度宽度\n  // const gW = width - m.left;\n  // const gH = height - m.top - m.bottom;\n\n  // // 定义x坐标轴的比例尺，gW为x轴的宽度，关于scaleBand参考上一篇文章以及相关文章\n  // // 这里我们会得到一个xScale.bandwidth()的距离，bandwidth()访问每个波段的宽度：\n  // const xScale = d3.scaleTime().range([0, gW]);\n\n  // // 定义好x轴定义域，画出x轴axisBottom，底部位置，year是值\n  // xScale.domain(data.map(item => new Date(item.Date)));\n\n  // g.append(\"g\")\n  // .attr(\"transform\", `translate(0, ${gH})`)\n  // .call(d3.axisBottom(xScale))\n  // .attr(\"stroke\", \"red\");\n  //   // 定义y坐标轴的比例尺，gH为y轴的宽度\n  // const yScale = d3.scaleLinear().range([gH, 0]);\n\n  // // 定义好y轴d定义域，画出y轴，y轴画在左边axisLeft，value是值\n\n  // yScale.domain([0, d3.max(data, item => item.AveragePrice)]);\n\n  // g.append(\"g\")\n  // .call(d3.axisLeft(yScale))\n  // .attr(\"stroke\", \"red\");\n  // // 先给点画上小圆圈和文字，创建一个文字和圆圈的group\n  // // join那句可以改为以前v4写法.enter().append('circle')\n\n  // const group1 = g.selectAll(\".group-circle-text\")\n  // .data(data)\n  // .join(\"g\")\n  // .attr(\"class\", \"group-circle-text\");\n\n  // // 画出圆点即是圆圈，xScale.bandwidth()就用到了,bandwidth()访问每个波段的宽度,\n  // // xScale.bandwidth() / 2 我们把元素位置居中\n\n  // group1.selectAll(\"circle\")\n  // .data(data)\n  // .join(\"circle\")\n  // .attr(\"cx\", d => {\n  //   return xScale(new Date(d.Date));\n  // })\n  // .attr(\"cy\", d => {\n  //   return yScale(d.AveragePrice);\n  // }).attr(\"r\", 3)\n  // .attr(\"fill\", \"red\");\n\n  // // 绘制出文字\n\n  // // group1.selectAll(\"text\")\n  // // .data(data)\n  // // .join(\"text\")\n  // // .attr(\"x\", d => {\n  // //   return xScale(d.Date) + xScale.bandwidth() / 2;\n  // // })\n  // // .attr(\"y\", d => yScale(d.AveragePrice) - 2)\n  // // .text(d => d.AveragePrice);\n\n  // // 创建一个line的生成器 用d3.line,把所有点连起来\n  // const line = d3.line().x(d => {\n  //   // 这里是d3.scaleBand自带比例尺\n  //   return xScale(new Date(d.Date));\n  // }).y(d => {\n  //   return yScale(d.value);\n  // }).curve(d3.curveCatmullRom);  //这里有多种形态可以选择\n\n  // g.append(\"path\")\n  // .attr(\"d\", line(data))\n  // .attr(\"fill\", \"none\")\n  // .attr(\"stroke\", \"purple\");\n}\nexport default function Chart1() {\n  _s();\n  const [dataset, setState] = useState([]);\n  var datas;\n  loadData().then(data => {\n    datas = data;\n    setState(JSON.stringify(data[0]));\n    console.log(data[0]);\n    drawChart(data);\n    return data[0];\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: dataset\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 126,\n    columnNumber: 5\n  }, this);\n}\n_s(Chart1, \"Iaq1MosrxDNjMYFZkmvXs0N4uvs=\");\n_c = Chart1;\nvar _c;\n$RefreshReg$(_c, \"Chart1\");","map":{"version":3,"names":["d3","useState","jsxDEV","_jsxDEV","loadData","fileFath","data","csv","console","log","drawChart","Chart1","_s","dataset","setState","datas","then","JSON","stringify","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/wanggaoyuan/Library/CloudStorage/OneDrive-Personal/Desktop/CS5346/d3WithReact/src/LinePlot.jsx"],"sourcesContent":["import * as d3 from \"https://cdn.jsdelivr.net/npm/d3@7/+esm\";\nimport { useState } from \"react\";\n\nasync function loadData() {\n  var fileFath = \"data/test.csv\"\n  const data = await d3.csv(fileFath);\n  console.log(data);\n  return data\n}\n\n// [{\n//   Date : data[0].Date,\n//   AveragePrice : data[0].AveragePrice,\n//   TotalVolume : data[0].TotalVolume,\n//   plu4046 : data[0].plu4046,\n//   plu4225 : data[0].plu4225,\n//   plu4770 : data[0].plu4770,\n//   TotalBags : data[0].TotalBags,\n//   SmallBags : data[0].SmallBags,\n//   LargeBags : data[0].LargeBags,\n//   XLargeBags : data[0].XLargeBags,\n//   type : data[0].type,\n//   region : data[0].region,\n// }]\n\nfunction drawChart(data) {\n  // const width = 600;\n  // const height = 400;\n\n  // const svg = d3\n  //   .select(\"body\")\n  //   .append(\"svg\")\n  //   .attr(\"width\", width)\n  //   .attr(\"height\", height);\n    \n  // // 创建一个g 当后面元素的group容器，移到（30，30）的位置\n  // // 定义上下左右边距给坐标轴文字距离\n  // const m = { top: 30, right: 30, bottom: 30, left: 30 };\n  // const g = svg.append(\"g\").attr(\"transform\", \"translate(30, 30)\");\n  \n  // // 实际我们图的高度宽度\n  // const gW = width - m.left;\n  // const gH = height - m.top - m.bottom;\n\n  // // 定义x坐标轴的比例尺，gW为x轴的宽度，关于scaleBand参考上一篇文章以及相关文章\n  // // 这里我们会得到一个xScale.bandwidth()的距离，bandwidth()访问每个波段的宽度：\n  // const xScale = d3.scaleTime().range([0, gW]);\n     \n  // // 定义好x轴定义域，画出x轴axisBottom，底部位置，year是值\n  // xScale.domain(data.map(item => new Date(item.Date)));\n \n  // g.append(\"g\")\n  // .attr(\"transform\", `translate(0, ${gH})`)\n  // .call(d3.axisBottom(xScale))\n  // .attr(\"stroke\", \"red\");\n  //   // 定义y坐标轴的比例尺，gH为y轴的宽度\n  // const yScale = d3.scaleLinear().range([gH, 0]);\n \n  // // 定义好y轴d定义域，画出y轴，y轴画在左边axisLeft，value是值\n \n  // yScale.domain([0, d3.max(data, item => item.AveragePrice)]);\n \n  // g.append(\"g\")\n  // .call(d3.axisLeft(yScale))\n  // .attr(\"stroke\", \"red\");\n  // // 先给点画上小圆圈和文字，创建一个文字和圆圈的group\n  // // join那句可以改为以前v4写法.enter().append('circle')\n\n  // const group1 = g.selectAll(\".group-circle-text\")\n  // .data(data)\n  // .join(\"g\")\n  // .attr(\"class\", \"group-circle-text\");\n\n  // // 画出圆点即是圆圈，xScale.bandwidth()就用到了,bandwidth()访问每个波段的宽度,\n  // // xScale.bandwidth() / 2 我们把元素位置居中\n\n  // group1.selectAll(\"circle\")\n  // .data(data)\n  // .join(\"circle\")\n  // .attr(\"cx\", d => {\n  //   return xScale(new Date(d.Date));\n  // })\n  // .attr(\"cy\", d => {\n  //   return yScale(d.AveragePrice);\n  // }).attr(\"r\", 3)\n  // .attr(\"fill\", \"red\");\n   \n   \n  // // 绘制出文字\n\t\n  // // group1.selectAll(\"text\")\n  // // .data(data)\n  // // .join(\"text\")\n  // // .attr(\"x\", d => {\n  // //   return xScale(d.Date) + xScale.bandwidth() / 2;\n  // // })\n  // // .attr(\"y\", d => yScale(d.AveragePrice) - 2)\n  // // .text(d => d.AveragePrice);\n\n  // // 创建一个line的生成器 用d3.line,把所有点连起来\n\t// const line = d3.line().x(d => {\n  //   // 这里是d3.scaleBand自带比例尺\n  //   return xScale(new Date(d.Date));\n  // }).y(d => {\n  //   return yScale(d.value);\n  // }).curve(d3.curveCatmullRom);  //这里有多种形态可以选择\n\n  // g.append(\"path\")\n  // .attr(\"d\", line(data))\n  // .attr(\"fill\", \"none\")\n  // .attr(\"stroke\", \"purple\");\n}\n\nexport default function Chart1() {\n  const [dataset, setState] = useState([]);\n  var datas\n  loadData().then((data) => {\n    datas = data\n    setState(JSON.stringify(data[0]));\n    console.log(data[0])\n    drawChart(data);\n    return data[0];\n  });\n  \n  return (\n    <div>\n      {dataset}\n    </div>\n  )\n}"],"mappings":";;AAAA,OAAO,KAAKA,EAAE,MAAM,wCAAwC;AAC5D,SAASC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjC,eAAeC,QAAQA,CAAA,EAAG;EACxB,IAAIC,QAAQ,GAAG,eAAe;EAC9B,MAAMC,IAAI,GAAG,MAAMN,EAAE,CAACO,GAAG,CAACF,QAAQ,CAAC;EACnCG,OAAO,CAACC,GAAG,CAACH,IAAI,CAAC;EACjB,OAAOA,IAAI;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASI,SAASA,CAACJ,IAAI,EAAE;EACvB;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAEA;;EAEA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAGA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACD;EACC;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;AAAA;AAGF,eAAe,SAASK,MAAMA,CAAA,EAAG;EAAAC,EAAA;EAC/B,MAAM,CAACC,OAAO,EAAEC,QAAQ,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EACxC,IAAIc,KAAK;EACTX,QAAQ,CAAC,CAAC,CAACY,IAAI,CAAEV,IAAI,IAAK;IACxBS,KAAK,GAAGT,IAAI;IACZQ,QAAQ,CAACG,IAAI,CAACC,SAAS,CAACZ,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;IACjCE,OAAO,CAACC,GAAG,CAACH,IAAI,CAAC,CAAC,CAAC,CAAC;IACpBI,SAAS,CAACJ,IAAI,CAAC;IACf,OAAOA,IAAI,CAAC,CAAC,CAAC;EAChB,CAAC,CAAC;EAEF,oBACEH,OAAA;IAAAgB,QAAA,EACGN;EAAO;IAAAO,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEV;AAACX,EAAA,CAhBuBD,MAAM;AAAAa,EAAA,GAANb,MAAM;AAAA,IAAAa,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}